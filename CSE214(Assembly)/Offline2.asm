TITLE PGM4_1.5: SAMPLE INPUT
.MODEL SMALL
.STACK 100H
.DATA 
N DW ? 
K DW ?
CIG DW ?
FIL DW ?
VAR1 DW ?   
TOTAL DW ?
RESULT DW ?
DIVISOR DW ?
.CODE
MAIN PROC 
      
      
  
    
    LOGIC_FOR_LOOP:
    
   ;INPUT 1 STARTED   
   MOV TOTAL,0
     
   INPUT1_LOOP_CONDITION: 
 
   MOV AH,1
   INT 21H 
   CMP AL, 0DH  ;IF ENTER THEN TERMINATE
   JNE INPUT1_LOOP
   JMP INPUT1_END
   INPUT1_LOOP:
   CMP AL,1AH   ; CHECKING EOF
   JE OUT_OF_THE_LOOP 
   MOV AH,0     ;CLEARING TO STORE IN VAR1
   MOV VAR1,AX  ; MOVING TO VAR1 AS AX WILL BE USED LATER
   SUB VAR1,'0' ; EXTRACTING NUMBER
   MOV AL,10    ; MULTIPLICATOR
   MUL TOTAL    ; MULTIPLICATION 
   ADD AX,VAR1  ; ADDING EXTRACTED NUMBER
   MOV TOTAL,AX ; READY FOR NEXT
   JMP INPUT1_LOOP_CONDITION  
   INPUT1_END: 
   MOV AX,TOTAL ;AS PROHIBITED
   MOV N,AX     ; STORING IN N
   MOV AX,0     ; CLEARING AX
   ;INPUT1_END   
   mov dl,0dh
   mov ah,2
   int 21h
   MOV DX,0
   
   
   
   ;INPUT 2 STARTED
   MOV TOTAL,0
     
   INPUT2_LOOP_CONDITION: 
 
   MOV AH,1
   INT 21H 
   CMP AL, 0DH     ;IF ENTER THEN TERMINATE
   JNE INPUT2_LOOP
   JMP INPUT2_END
   INPUT2_LOOP: 
   MOV AH,0        ;CLEARING TO STORE IN VAR1
   MOV VAR1,AX     ;MOVING TO VAR1 AS AX WILL BE USED LATER
   SUB VAR1,'0'    ; EXTRACTING NUMBER
   MOV AL,10       ; MULTIPLICATOR
   MUL TOTAL       ;MULTIPLICATION
   ADD AX,VAR1     ;ADDING EXTRACTED NUMBER
   MOV TOTAL,AX    ; READY FOR NEXT
   JMP INPUT2_LOOP_CONDITION  
   INPUT2_END:
   MOV AX,TOTAL    ; AS PROHIBITED
   MOV K,AX        ; STORING IN K
   MOV AX,0        ; CLEARING AX
   ;INPUT2_END     
   
   
   
   
   
   
   
   
   
   
   ;STARTING PROGRAMME
   
   MOV CX,K             ; NOW CX CAN BE USED AS ALTERNATIVE OF K STORING AS IT IS PROHIBITED
   MOV AX,N             ; STORING TO AX AS IT IS PROHIBITED
   MOV CIG,AX 
   MOV AX,N             ; SAME AS BEFORE
   MOV FIL,AX 
   ; READY FOR DIVISION AND LOOP
   MOV AX,FIL           ; DIVIDEND
   MOV DX,0             ; CLEARING FOR STORING RESULT
   MOV BX,k             ;DIVISOR
   
   LOOP2_CONDITION:     ; STARTING LOOP
   CMP FIL,CX           ;CHECKING LOGIC
   JAE  LOOP2           ;GO TO LOOP
   JMP END_LOOP2        ;ENDING LOOP
                       
   LOOP2:
   DIV BX
   MOV FIL,DX           ;MOVING REMAINDER TO FIL
   ADD FIL,AX           ; ADD  QUOTIENT WITH IT
   ADD CIG,AX           ; ADDING QUOTIENT WITH CIG NUMBER  
   MOV AX,FIL           ; MOVING FIL TO AX BECAUSE IT IS DIVIDENDS POSITION
   MOV DX,0             ; CLEARING DX TO BE READY FOR NEXT DIVISION
   JMP LOOP2_CONDITION      
   END_LOOP2:           ; END OF LOOP2
   
      
   MOV AX,CIG     
   
   ;ENDING PROGRAMME 
   
   
   
   
   mov dl,0dh
   mov ah,2
   int 21h   
   mov dl,0ah
   int 21h
   MOV DX,0   
   MOV AX,CIG
   
   
   
   ;PRINTING OUTPUT STARTED  
   MOV DX,0             ;CLEARING DX
   MOV DIVISOR,10       ;SETTING DIVISOR
   MOV CX,10000         ;SETTING DIVISOR TO DIVIDE THE OUTPUT
   FIRST_DIVISION:
   DIV CX                ;DIVISION  UNTIL A NUMBER EXCEPT ZERO
   CMP AX,0              ; CHECKING IF THE QUOTIENT IS ZERO
   JNE SECOND_DIVISION
   MOV VAR1,DX           ;SAVING REMAINDER
   MOV DX,0              ;CLEARING DX
   MOV AX,CX             ;MOVING CX TO AX TO DIVIDE
   DIV DIVISOR           ;DIVIDING BY 10
   MOV CX,AX             ;MOVING QUOTIENT TO DIVISOR
   MOV AX,VAR1           ; NOW AX HOLDS THE VALUE OF REMAINDER OF THE  DIVISION OF THE RESULT
   JMP FIRST_DIVISION    ;REPEAT
   SECOND_DIVISION:      ;NOW WE GOT A NONZERO DIGIT
   MOV VAR1,DX           ;STORING REMAINDER TO CONTINUE PROCESS
   MOV DL,AL             ;PRESENTATION PROCEDURE
   ADD DL,'0'
   MOV AH,2
   INT 21H
   
   MOV DX,0              ;CLEARING DX FOR NEXT DIVISION
   MOV AX,CX             ;MOVING CX TO AX TO DIVIDE BY 10
   DIV DIVISOR           ;DIVIDING
   MOV CX,AX             ;STORING QUOTIENT
   CMP CX,0              ;CHECKING IF ZERO
   JE END_OF_OUTPUT      ;IF NOT CONTINUE
   MOV DX,0              ;CLEARING DX FOR NEXT DIVISION
   MOV AX,VAR1           ;NOW WE HAVE REMANDER OF OUTPUT DIVISION
   DIV CX                ;DIVIDING
   JMP SECOND_DIVISION   ;REPEAT
   END_OF_OUTPUT:        ;END 
   
   
   
   
   ;ENDING PRINTING OUTPUT 
    
   JMP LOGIC_FOR_LOOP
    
   OUT_OF_THE_LOOP:  
   
   ;task ended!!
   
   MOV AH,4CH
   INT 21H
     
   
   
MAIN ENDP
    END MAIN